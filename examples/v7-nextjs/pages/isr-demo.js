import React from 'react'

export async function getStaticProps() {
  // Simulate fetching data, e.g., from an API
  const data = { message: `This page was generated at ${new Date().toISOString()}` }

  // Wait for 1 second to simulate a fetch delay
  await new Promise((resolve) => setTimeout(resolve, 1000))

  return {
    props: {
      data,
    },
    revalidate: 30,
  }
}

const IsrDemo = ({ data }) => {
  return (
    <div className="rounded bg-gray-200 p-4 text-gray-600">
      <h1 className="mb-4 text-2xl text-black">ISR Demo Page</h1>
      <p className="text-lg">
        This page demonstrates Incremental Static Regeneration (ISR) with Next.js. ISR allows Next.js to update static pages in the background,
        without requiring a full rebuild. This improves the performance and freshness of the page content.
      </p>
      <div className="mt-4">
        <p className="mb-4">To verify that Incremental Static Regeneration (ISR) is working on this page, you can follow these steps:</p>
        <ol className="mb-4 ml-4 list-decimal">
          <li>
            Observe the initial content rendered on the page, including the timestamp generated by the <code>getStaticProps</code> function.
          </li>
          <li>Wait for the specified revalidate time (30 seconds in this case).</li>
          <li>Refresh the page and check if the timestamp has been updated.</li>
        </ol>
        <p>
          If the timestamp has been updated, it indicates that the page has been regenerated in the background using ISR. The revalidate time
          determines how often Next.js will attempt to regenerate the page. In this case, the page will be regenerated every 30 seconds, ensuring that
          the content stays fresh.
        </p>
      </div>
      <p className="mt-4 text-lg">{data.message}</p>
    </div>
  )
}

export default IsrDemo
