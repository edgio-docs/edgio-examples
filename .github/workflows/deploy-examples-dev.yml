name: Deploy Examples (dev-only)

on:
  push:
    branches:
      - '**'
      - '!main'
  workflow_dispatch:

# In case you push new commit into the MR / the previous runs will automatically stop
concurrency:
  group: dev-examples-${{ github.ref }}
  cancel-in-progress: true

env:
  # Node version for all the jobs
  NODE_VERSION: 16

  # Set env var based on branch name
  GIT_REF: ${{ github.ref }}
  EDGIO_ENV: ${{ github.ref == 'refs/heads/main' && 'live' || 'test' }}
  EDGIO_TEAM: layer0-docs
  EDGIO_SITE: edgio-examples
  EDGIO_DEPLOY_TOKEN: ${{secrets.EDGIO_EXAMPLES_DEPLOY_TOKEN}}
  OPTIONAL_API_URL: --api-url=https://app.layer0.co
  COMMENT_ID: preview-${{ github.ref }}

jobs:
  prepare:
    name: Prepare env for examples
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setMatrix.outputs.matrix }}
      branch: ${{ steps.setBranch.outputs.branch }}
      pr: ${{ steps.finder.outputs.pr }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: main

      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # NODE_VERSION
          registry-url: https://registry.npmjs.org/

      - uses: actions/setup-python@v2
        with:
          python-version: 2.7

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-packages-node-modules-node16-v1
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json', 'packages/**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-

      - name: Extract branch name
        id: setBranch
        shell: bash
        run: echo -e "branch=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^[:alnum:].-]/-/g')" >> $GITHUB_OUTPUT

      - run: npm ci

      - name: Get matrix of modified examples
        id: setMatrix
        run: echo -e "matrix=$(node scripts/helpers/printModifiedExamples.js)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: jwalton/gh-find-current-pr@v1
        id: finder

      - name: Create comment for preview links
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          number: ${{ steps.finder.outputs.pr }}
          header: deploy-status
          recreate: true
          message: |
            Preview links for commit ${{ github.sha }}:

  examples:
    name: Examples
    needs: prepare
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      max-parallel: 5 # Prevent exceeding rate limit on Edgio platform during deployment
      matrix:
        example: ${{ fromJson( needs.prepare.outputs.matrix ) }}
    env:
      EXAMPLE_DIR: examples/${{ matrix.example }}
      ENV_CMD_ARGS: --site=$EDGIO_SITE --team=$EDGIO_TEAM --token=$EDGIO_DEPLOY_TOKEN $OPTIONAL_API_URL
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }} # NODE_VERSION
          registry-url: https://registry.npmjs.org/

      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-examples-node-modules-${{ matrix.example }}-node16-v2
        with:
          path: |
            examples/${{ matrix.example }}/node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles(format('examples/{0}/package-lock.json', matrix.test), 'packages/*/package-lock.json') }}

      # Install dependencies for this example
      - name: Install dependencies
        run: |
          npm i -g @edgio/cli
          # Check if package-lock.json file exists
          if [ -f "package-lock.json" ]; then
            # Use npm
            npm ci --legacy-peer-deps
          else
            # Check if yarn.lock file exists
            if [ -f "yarn.lock" ]; then
              # Use yarn
              yarn install --immutable
            else
              # No lock file found
              echo "No lock file found. Please run 'npm ci' or 'yarn install --frozen-lockfile' to install dependencies."
            fi
          fi
        working-directory: ${{ env.EXAMPLE_DIR }}

      - name: Disable analytics
        run: edgio config set-analytics false

      - name: Prepare environments for the example
        run: |
          output=$(eval "edgio env list $ENV_CMD_ARGS")

          # Get the lines that contain the list of environments
          envs=$(echo "$output" | grep -A 1000 "Environments:")

          # Remove the "Environments: " prefix from the first line and remove all lines before the first one
          envs=$(echo "$envs" | tail -n +2)

          # Replace all newline characters with a space
          envs=$(echo "$envs" | tr '\n' ' ')

          if [[ " $envs " =~ " $ENV_NAME " ]]; then
            # environment exists in the list; skip it
            echo "Environment '${ENV_NAME}' already exists in the list of environments and is being skipped."
          else
            # environment doesn't exist in the list; add it
            eval "edgio env add $ENV_CMD_ARGS --environment=$ENV_NAME"
          fi
        env:
          ENV_NAME: ${{ matrix.example }}-${{ env.EDGIO_ENV }}

      # - name: Validate package scripts
      #   run: node scripts/helpers/validatePackageScripts.js ${{ env.EXAMPLE_DIR }}

      - name: Deploy example
        id: deploy
        shell: bash
        run: |
          # Run the command and redirect stderr to stdout; we return true
          # to prevent the script from exiting if the command fails
          DEPLOY=$(npm run edgio:deploy -- ${{ env.ENV_CMD_ARGS }} --branch=${{ env.BRANCH_NAME }} --environment=${{ env.ENV_NAME }} 2>&1) || true

          # DEPLOY="${DEPLOY//'%'/'%25'}"
          # DEPLOY="${DEPLOY//$'\n'/'%0A'}"
          # DEPLOY="${DEPLOY//$'\r'/'%0D'}"
          echo "$DEPLOY"

          # Save the output of the command to the output variable
          echo DEPLOY_OUTPUT=$DEPLOY >> $GITHUB_OUTPUT

          # Get the preview link from the output of the command
          echo "$DEPLOY" |
            sed -n 's/.*\(https.*-perma\.link\).*/\1/p' |
            {
              read matches || matches=""
              if [[ -n $matches ]]; then
                echo "matches=$matches" >> $GITHUB_OUTPUT
                echo "status=✅ [Preview Site]($matches)" >> $GITHUB_OUTPUT
                exit 0
              else
                echo "matches=" >> $GITHUB_OUTPUT
                # Append the current job number to the end of the link
                echo "status=❌ (See status check)" >> $GITHUB_OUTPUT
                exit 1
              fi
            }
        env:
          ENV_NAME: ${{ matrix.example }}-${{ env.EDGIO_ENV }}
          BRANCH_NAME: ${{ needs.prepare.outputs.branch }}
        working-directory: ${{ env.EXAMPLE_DIR }}

      - name: Publish Preview Link
        if: ${{ always() }}
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          number: ${{ needs.prepare.outputs.pr }}
          header: deploy-status
          append: true
          message: |
            ##### `${{ matrix.example }}`: ${{ steps.deploy.outputs.status }}
